-- activeGrid.transform

/*
- relancer automatiquement l outil quand un cellule est fini
x- ajouter une fonction d'auto close
x- ajouter une fonction de snap (contrainte en x ou y)quand on appui sur shift
	x- travailler dans l'orientation de la grille active

*/


try(destroydialog splineCreatorRLT)catch()
rollout splineCreatorRLT "spline creator"
(
	local newCell
	
	checkbutton newCellCB "new cell"
	
	fn testPickPoint  =
	(
		local p = pickPoint () -- mouseMoveCallback:printPickPoint
		format "p = %\n" p
		box position: p
	)

	tool splineTool
	(
		local newOne = false
		local newCell
		local lastPos
		local lastgridpoint
		local firstGridPoint
		
		on start do
		(
		)
		
		on mousePoint clickno do
		(
-- 			format "new click\n"
			format "newOne: %\n" newOne
			if newOne or clickno == 1 then
			(
-- 				format "mousePoint init: %\n" clickno
				local activegridTM
				
				if activeGrid == undefined then activegridTM = matrix3 1
				else activegridTM = activeGrid.transform
-- 				format "activegridTM: %\n" activegridTM
	-- 			max modify mode
				max modify mode

				newCell= SplineShape name: (uniquename "cell_") transform: activegridTM
-- 				updateShape newCell

				newCell.vertexTicks = on

-- 				addmodifier newCell (sweep ())
				addmodifier newCell (edit_poly ())
				
-- 				format "mousePoint delete: %\n" clickno
				addNewSpline newCell
				firstGridPoint = gridPoint
				addKnot newCell 1 #corner #curve (gw.mapCPToWorld firstGridPoint)
				
				lastgridpoint = gridPoint
				lastPos = gw.mapCPToWorld lastgridpoint
				addKnot newCell 1 #corner #curve lastPos
				
				updateshape newCell	
					
				select newCell
				modPanel.setCurrentObject newCell.baseobject 
				showEndResult = false
					
				format "showEndResult: %\n" showEndResult
				format "start new spline: %\n" newCell.name
				format "mousePoint init: %\n" clickno
					
				newOne = false
			)
			else if clickno == 2 then
			(	
			)
			else
			(
				lastgridpoint = gridPoint
-- 				format "distance:%\n" (distance firstGridPoint lastGridPoint)
-- 				format "gridDist: %\n" (gridDist)
				
				if (distance firstGridPoint lastGridPoint) < 10.0 then 
				(
					format "close spline\n"
					close  newCell 1
					knotToDel = numKnots newCell 1
					deleteknot newCell 1 knotToDel
					newOne = true
-- 					stoptool splineTool
				)
				else
				(
					lastPos = gw.mapCPToWorld lastgridpoint
					addKnot newCell 1 #corner #curve lastPos
				)

-- 				addKnot newCell 1 #corner #curve (gw.mapCPToWorld gridPoint)
				format "mousePoint: %\n" clickno
			)
			
			updateshape newCell
		)
		
		on mouseMove clickno do
		(
			if newOne then
			(
				if isvalidnode newCell then 
				(
					updateshape newCell
					showEndResult = true
					newCell.vertexTicks = off
					newCell.pivot = newCell.center
					newCell.xray = on
					newCell.wirecolor = color 135 6 6
				)
			)
			else
			(
				local knotCount = numKnots newCell 1
				local newGridPoint = gridPoint
				
				-- contrainte en x ou y
				if shiftKey then  
				(
					local testVec =  normalize(newGridPoint - lastGridPoint)
					if testVec.x^2 > testVec.y^2 then newGridPoint.y = lastGridPoint.y		
					else	newGridPoint.x = lastGridPoint.x	
				)
					
				local curPos = gw.mapCPToWorld newGridPoint
				
				setKnotPoint newCell 1 knotCount curPos
				updateshape newCell	
			)			
		)
		
		on mouseAbort clickno do
		(
			format "mouseAbort: %\n" clickno
		)			
		
		on stop do
		(
			format "stop\n" 
-- 			if isvalidnode newCell then updateshape newCell
				
			if isvalidnode newCell then 
			(
				updateshape newCell
				showEndResult = true
				newCell.vertexTicks = off
				newCell.pivot = newCell.center
				newCell.xray = on
				newCell.wirecolor = color 135 6 6
			)
		)
	)
	
	on newCellCB changed state do
	(
		if state then
		(
			local continueTool = true
			while continueTool == true do
			(
				continueTool = starttool splineTool
			)
			newCellCB.state = false
		)
		else
		(
			stoptool splineTool
		)
	)
)
createdialog splineCreatorRLT